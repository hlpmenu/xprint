# Changelog
**Changelog generated by AI based on the git diff between versions.**
**Changes before v0.0.5 are added after the v0.0.5 so they are not as detailed.**
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [v0.0.5] - 2025-03-30

### Added
- Specialized float formatting with dedicated functions in new `printfloat.go`:
  - `printFloat32` for float32 type-specific formatting
  - `printFloat64` for float64 type-specific formatting with improved precision
- Comprehensive CI/CD pipeline:
  - New GitHub Actions workflows: `build.yml`, `gosec.yml`, `lint.yml`, `scorecard.yml`, `tests.yml`
  - GitHub Dependabot configuration for automated dependency management
- Improved testing infrastructure:
  - New benchmark test framework in `benchmark_test/`
  - New test script (`test.sh`) with multiple test modes
  - Coverage reporting and integration with Codecov
- New code generation tooling:
  - `generate/generate_printint.go` for optimized integer formatting
- New core functionality:
  - Append operations (`append.go`, `append_test.go`) for buffer manipulation
  - Padding functionality for formatted output
  - Non-printf formatting functions for direct string formatting
  - Integer maps for optimized number conversion
- Security scanning infrastructure:
  - GoSec workflow for automated security analysis
  - Scorecard workflow for codebase health monitoring
- Comprehensive linting system:
  - Multiple linting profiles in `_lint/` directory
  - Full linting script (`full-lint.sh`) for thorough code analysis

### Changed
- Enhanced buffer implementation:
  - Added specialized buffer methods including `writeStringToUpper` and `writeNilArg`
  - Improved type handling in buffer operations
- Optimized formatting operations:
  - Replaced generic float handling with type-specific implementations
  - Enhanced complex number formatting with specialized float handling
  - Improved string formatting and manipulation
- Upgraded CI/CD configuration:
  - Renamed and enhanced primary workflow from `ci.yml` to `build.yml`
  - Added multiple verification steps in build process
  - Added dependency verification and validation
- Improved error handling:
  - Enhanced nil pointer handling with specialized formatting
  - Better type validation and error reporting
- Enhanced reflect functionality:
  - Optimized reflect-based formatting with improved type detection
  - Better handling of complex nested structures

### Fixed
- Float precision handling:
  - Fixed formatting issues with different precision levels
  - Specialized float32 and float64 handling for accuracy
- Complex number formatting:
  - Improved real and imaginary component handling
  - Proper type detection and formatting
- Pointer formatting:
  - Enhanced nil pointer detection and formatting
  - Fixed recursive pointer handling
- Code quality issues:
  - Fixed various code smells and potential bugs
  - Addressed linting issues across the codebase
- Edge cases:
  - Improved handling of special numeric values
  - Better handling of format string edge cases

### Removed
- Old linting configuration:
  - Removed `_lint/.golangci.json` in favor of multiple specialized profiles
- Redundant constants:
  - Removed unused digit constants and type flags
  - Consolidated duplicated string constants
- Duplicated code:
  - Refactored duplicated float formatting logic into specialized functions
  - Eliminated redundant type checking code

## [v0.0.4] - 2025-03-07

### Fixed
- Optimized float formatting implementation
- Improved precision handling for floating-point numbers
- Enhanced float formatting test suite with comprehensive precision tests
- Added detailed output for float formatting behavior validation

## [v0.0.3] - 2025-03-07

### Changed
- Enhanced test-floats functionality with detailed output
- Improved float formatting behavior reporting
- Added comprehensive float formatting test suite
- Added new validation test cases for float precision
- Enhanced error reporting in float formatting tests

## [v0.0.2] - 2025-03-07

### Fixed
- Removed debug logging statements
- Cleaned up codebase
- Fixed pointer formatting issues
- Improved error handling in print_types.go

## [v0.0.1] - 2025-03-05

### Added
- Initial release
- Basic fmt package compatibility
- Core formatting functionality
- Basic test suite
- Float formatting support
- Complex number formatting support
- Pointer formatting support
- Basic validation framework

[v0.0.5]: https://github.com/hlpmenu/xprint/compare/v0.0.4...v0.0.5
[v0.0.4]: https://github.com/hlpmenu/xprint/compare/v0.0.3...v0.0.4
[v0.0.3]: https://github.com/hlpmenu/xprint/compare/v0.0.1...v0.0.3
[v0.0.2]: https://github.com/hlpmenu/xprint/compare/0.0.1...0.0.2
[v0.0.1]: https://github.com/hlpmenu/xprint/releases/tag/v0.0.1
[0.0.1]: https://github.com/hlpmenu/xprint/releases/tag/0.0.1
